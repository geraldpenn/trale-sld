--- /home/ke/opt/trale.orig/ghooks.pl	2009-06-02 18:15:20.000000000 +0200
+++ /home/ke/opt/trale/ghooks.pl	2009-06-21 17:09:04.000000000 +0200
@@ -158,7 +158,6 @@
 
 grisu_portray_fs(Stream,Type,FS,KeyedFeats,
                  Vis0,Vis,Tags0,Tags,HD0,HD,ToplevelFlagAss) :-
-
    toplevel_init(FS,Tags0,ToplevelFlagAss,HD0,HD1),
 
    % retrieve the information we stored in the HD arg. between callbacks:
@@ -706,9 +705,12 @@
 %   grisu_pp_fs_res(FS,Residue,_,0),
 %   clear_title.
 
+%portray_dog(Words,Tree
+
 % HACK: no calling description display yet
 portray_cat(Words,_Desc,FS,Residue,Index) :-
   grale_flag,
+  % for now we only print Words (in window title) and FS
   list_to_double_quoted_string(Words,DQWords),  % KNOWN BUG: must handle var Words arg for gen/1.
   ( ale_lists_defined -> clause(fcolour(hd,HdPos,_),true),
                          clause(fcolour(tl,TlPos,_),true),
@@ -856,7 +858,7 @@
 
 % ==============================================================================
 
-% this catches the pp_fs/1 call in portray_cat/4
+% this catches the pp_fs/1 call in portray_cat/5
 portray_fs(Type,FS,MGType,KeyedFeats,VisIn,VisOut,DupsIn,DupsOut,Col,HDIn,HDOut) :-
   ( get_assoc(id_index,HDIn,ID0,HDMid,IDMid) -> PortrayTreeReEntrancies = false
   ; get_assoc(top_index,HDIn,ID0), get_assoc(tree_struc,HDIn,Tree),
@@ -871,9 +873,12 @@
   ; get_assoc(FS,DupsIn,TagNum) -> Dup = dup, HDMid1 = HDMid, IDMid is ID0 + 1
   ; Dup = nodup, HDMid1 = HDMid
   ),
+
+
   
   ( Dup == dup -> name(TagNum,TagNumChars), name(ID0,ID0Chars),
-                  append_list(["(#",ID0Chars," ",TagNumChars,")"],GraleString),
+                  fetch_flags(FS,HDIn,Flags),
+                  append_list(["(#",Flags,ID0Chars," ",TagNumChars,")"],GraleString),
                   HDMid3 = HDMid1, VisMid = VisIn, DupsMid = DupsIn,
                   grale_write_chars(GraleString)
   ; Type == 0 -> ( MGType == 0 -> MGTypeString = "\"mgsat\""
@@ -882,10 +887,11 @@
 		 ),
                  ( var(ID1) -> ID1 is ID0 + 1, IDMid is ID1 + 1 ; IDMid is ID0 + 1 ),
                  name(ID1,ID1Chars), name(ID0,ID0Chars),
-                 append_list(["(S",ID1Chars,"(",ID0Chars,MGTypeString,"))"],GraleString),
+                 fetch_flags(FS,HDIn,Flags),
+                 append_list(["(S",ID1Chars,"(",Flags,ID0Chars,MGTypeString,"))"],GraleString),
                  HDMid3 = HDMid1, VisMid = VisIn, DupsMid = DupsIn,
                  grale_write_chars(GraleString)
-  ; portray_fs_by_type(Type,IDMid,ID1,ID0,KeyedFeats,VisIn,VisMid,DupsIn,DupsMid,Col,HDMid1,HDMid3)
+  ; portray_fs_by_type(Type,FS,IDMid,ID1,ID0,KeyedFeats,VisIn,VisMid,DupsIn,DupsMid,Col,HDMid1,HDMid3)
   ),
 
   ( PortrayTreeReEntrancies == true -> portray_tree(Tree,DupsMid,HDMid3,HDMid4),
@@ -893,23 +899,29 @@
   ; DupsOut = DupsMid, VisOut = VisMid, HDOut = HDMid3
   ).
 
-portray_fs_by_type(e_list,IDMid,ID1,ID0,_EmptyList,Vis,Vis,Dups,Dups,_Col,HD,HD) :-
-  !, (var(ID1) -> IDMid is ID0 + 1, UseID = ID0 ; UseID = ID1, IDMid = ID0),
+portray_fs_by_type(e_list,FS,IDMid,ID1,ID0,_EmptyList,Vis,Vis,Dups,Dups,_Col,HD,HD) :-
+  !,
+  fetch_flags(FS,HD,Flags),
+  (var(ID1) -> IDMid is ID0 + 1, UseID = ID0 ; UseID = ID1, IDMid = ID0),
   name(UseID,UseIDChars),
-  append_list(["(L",UseIDChars,")"],GralePrefix),
+  append_list(["(L",Flags,UseIDChars,")"],GralePrefix),
   grale_write_chars(GralePrefix).
-portray_fs_by_type(ne_list,IDMid,ID1,ID0,KeyedFeats,VisIn,VisMid,DupsIn,DupsMid,Col,HDMid1,HDMid3) :-
-  !, (var(ID1) -> IDMid is ID0 + 1, UseID = ID0 ; UseID = ID1, IDMid = ID0),
+portray_fs_by_type(ne_list,FS,IDMid,ID1,ID0,KeyedFeats,VisIn,VisMid,DupsIn,DupsMid,Col,HDMid1,HDMid3) :-
+  !,
+  fetch_flags(FS,HDMid1,Flags),
+  (var(ID1) -> IDMid is ID0 + 1, UseID = ID0 ; UseID = ID1, IDMid = ID0),
   name(UseID,UseIDChars),
-  append_list(["(L",UseIDChars],GralePrefix),
+  append_list(["(L",Flags,UseIDChars],GralePrefix),
   grale_write_chars(GralePrefix),
   portray_nelist_vs(KeyedFeats,VisIn,VisMid,DupsIn,DupsMid,Col,HDMid1,HDMid3),
   grale_write_chars(")").
 % HACK: for now, display polymorphically typed lists as normal feature structures.
 
-portray_fs_by_type(sem,IDMid,ID1,ID0,KeyedFeats,Vis,Vis,Dups,Dups,_Col,HD,HD) :-
+portray_fs_by_type(sem,FS,IDMid,ID1,ID0,KeyedFeats,Vis,Vis,Dups,Dups,_Col,HD,HD) :-
   ale_flag(cllrs,on),
-  !, get_assoc(sem_residue,HD,SemResidue),
+  !,
+  fetch_flags(FS,HD,Flags),
+  get_assoc(sem_residue,HD,SemResidue),
   memberchk(fval(sem,SemFS,_),KeyedFeats), SemFS = (a_ sem(Term,_)),
   memberchk(fval(pivot,PivotFS,_),KeyedFeats), PivotFS = (a_ sem(Pivot,_)),
   memberchk(fval(root,RootFS,_),KeyedFeats), RootFS = (a_ sem(Root,_)),
@@ -917,19 +929,19 @@
   name(UseID,UseIDChars),
   \+ \+ (pp_sem(Term,SemResidue,SemFS,Pivot,Root,SemString),       % e.g., ^{every(x,A:[x],B:[x])}
 %	    name(SemName,SemString), write(SemName), nl, % DEBUG
-         append_list(["(A",UseIDChars,"\"::LRS::",SemString,"\")"],GralePrefix),
+         append_list(["(A",Flags,UseIDChars,"\"::LRS::",SemString,"\")"],GralePrefix),
          grale_write_chars(GralePrefix)
 	).  % HACK: for now, unwind this, so that we can print a given subterm again from another
             %  LF value.  We don't have a good way of representing structure sharing across underspecified
             %  terms right now, so we just start over with each one.
-portray_fs_by_type(Type,IDMid,ID1,ID0,KeyedFeats,VisIn,VisMid,DupsIn,DupsMid,Col,HDMid1,HDMid3) :-
+portray_fs_by_type(Type,FS,IDMid,ID1,ID0,KeyedFeats,VisIn,VisMid,DupsIn,DupsMid,Col,HDMid1,HDMid3) :-
+  fetch_flags(FS,HDMid1,Flags),
   type_to_double_quoted_string(Type,TypeString),
   ( var(ID1) ->  ID1 is ID0 + 1, IDMid is ID1 + 1 ; IDMid is ID0 + 1),
   name(ID1,ID1Chars), name(ID0,ID0Chars),
-  append_list(["(S",ID1Chars,"(",ID0Chars,TypeString,")"],GralePrefix),
+  append_list(["(S",Flags,ID1Chars,"(",ID0Chars,TypeString,")"],GralePrefix),
   grale_write_chars(GralePrefix),
-  sort_keyed_feats(Type,KeyedFeats,SortedKeyedFeats),
-  portray_vs(SortedKeyedFeats,VisIn,VisMid,DupsIn,DupsMid,Col,HDMid1,HDMid3).
+  portray_vs(KeyedFeats,VisIn,VisMid,DupsIn,DupsMid,Col,HDMid1,HDMid3).
 
 portray_vs([],Vis,Vis,Dups,Dups,_,HD,HD) :-
   grale_write_chars(")").
@@ -953,51 +965,61 @@
 
 portray_tail(0,FS,ne_list,_,Vis,Vis,Dups,Dups,_,HD,HD) :-
   !,
+  fetch_flags(FS,HD,Flags),
   ( get_assoc(FS,Dups,TagNum) -> get_assoc(id_index,HDIn,ID0,HDOut,IDMid), ID1 is ID0 + 1, IDMid is ID1 + 1,
                                  name(TagNum,TagNumChars), name(ID0,ID0Chars), name(ID1,ID1Chars),
-                                 append_list(["(Z",ID0Chars,"(#",ID1Chars," ",TagNumChars,"))"],GraleString),
+                                 append_list(["(Z",Flags,ID0Chars,"(#",ID1Chars," ",TagNumChars,"))"],GraleString),
                                  grale_write_chars(GraleString)
 
   ; get_assoc(id_index,HDIn,ID0,HDOut,IDMid), ID1 is ID0 + 1, IDMid is ID1 + 1,
     name(ID0,ID0Chars), name(ID1,ID1Chars),
-    append_list(["(Z",ID0Chars,"(A",ID1Chars,"\"...\"))"],GraleString),
+    append_list(["(Z",Flags,ID0Chars,"(A",ID1Chars,"\"...\"))"],GraleString),
     grale_write_chars(GraleString)
   ).
 portray_tail(0,FS,e_list,_,Vis,Vis,Dups,Dups,_,HDIn,HDOut) :-
   !,
+  fetch_flags(FS,HDIn,Flags),
   ( get_assoc(FS,Dups,TagNum) -> get_assoc(id_index,HDIn,ID0,HDOut,IDMid), ID1 is ID0 + 1, IDMid is ID1 + 1,
                                  name(TagNum,TagNumChars), name(ID0,ID0Chars), name(ID1,ID1Chars),
-                                 append_list(["(Z",ID0Chars,"(#",ID1Chars," ",TagNumChars,"))"],GraleString),
+                                 append_list(["(Z",Flags,ID0Chars,"(#",ID1Chars," ",TagNumChars,"))"],GraleString),
                                  grale_write_chars(GraleString)
 
   ; HDOut = HDIn
   ).
 portray_tail(e_list,FS,_,_,Vis,Vis,Dups,Dups,_,HDIn,HDOut) :-
   !,
+  fetch_flags(FS,HDIn,Flags),
   ( get_assoc(FS,Dups,TagNum) -> get_assoc(id_index,HDIn,ID0,HDOut,IDMid), ID1 is ID0 + 1, IDMid is ID1 + 1,
                                  name(TagNum,TagNumChars), name(ID0,ID0Chars), name(ID1,ID1Chars),
-                                 append_list(["(Z",ID0Chars,"(#",ID1Chars," ",TagNumChars,"))"],GraleString),
+                                 append_list(["(Z",Flags,ID0Chars,"(#",ID1Chars," ",TagNumChars,"))"],GraleString),
                                  grale_write_chars(GraleString)
   ; HDOut = HDIn
   ).
 portray_tail(ne_list,FS,_,KeyedFeats,VisIn,VisOut,DupsIn,DupsOut,Col,HDIn,HDOut) :-
   !,
+  fetch_flags(FS,HDIn,Flags),
   ( get_assoc(FS,DupsIn,TagNum) -> get_assoc(id_index,HDIn,ID0,HDOut,IDMid), ID1 is ID0 + 1, IDMid is ID1 + 1,
                                    name(TagNum,TagNumChars), name(ID0,ID0Chars), name(ID1,ID1Chars),
-                                   append_list(["(Z",ID0Chars,"(#",ID1Chars," ",TagNumChars,"))"],GraleString),
+                                   append_list(["(Z",Flags,ID0Chars,"(#",ID1Chars," ",TagNumChars,"))"],GraleString),
                                    VisOut = VisIn, DupsOut = DupsIn,
                                    grale_write_chars(GraleString)
   ; portray_nelist_vs(KeyedFeats,VisIn,VisOut,DupsIn,DupsOut,Col,HDIn,HDOut)
   ).
 portray_tail(Type,FS,MGType,KeyedFeats,VisIn,VisOut,DupsIn,DupsOut,Col,HDIn,HDOut) :-
   % this is the case that the type, list, uses, among possibly others
+  fetch_flags(FS,HDIn,Flags),
   get_assoc(id_index,HDIn,ID0,HDMid,IDMid), IDMid is ID0 + 1,
   name(ID0,ID0Chars),
-  append_list(["(Z",ID0Chars],GralePrefix),
+  append_list(["(Z",Flags,ID0Chars],GralePrefix),
   grale_write_chars(GralePrefix),
   portray_fs(Type,FS,MGType,KeyedFeats,VisIn,VisOut,DupsIn,DupsOut,Col,HDMid,HDOut),
   grale_write_chars(")").
 
+fetch_flags(FS,HD,Flags) :-
+  get_assoc(different(FS),HD,true)
+  -> Flags = "*"
+   ; Flags = "".
+
 % HACK: we're really supposed to use GRALE ids rather than re-entrant tags here, but
 % since trees must be marhsalled before re-entrancies, we don't have the ids yet.  So
 % conflate ids with tags in all S-containers with re-entrancies.
@@ -1179,6 +1201,12 @@
   args_to_double_quoted_string_act(NewN,A,Term,44,ArgStringMid,Rest).
 
 :- dynamic grdebug/1.
+:- dynamic redirect_grale_output_to_tralesld/2.
+
+grale_write_chars(Chars) :-
+  redirect_grale_output_to_tralesld(StepID,_),
+  !,
+  tralesld_grale_message_chunk(StepID,Chars).
 
 grale_write_chars(Chars) :-
   dget_output_stream(GraleOStream),
@@ -1186,10 +1214,20 @@
   write(GraleOStream,String).
 
 grale_nl :-
+  redirect_grale_output_to_tralesld(StepID,Port),
+  !,
+  tralesld_grale_message_chunk(StepID,[10]),
+  tralesld_grale_message_end(StepID,Port).
+
+grale_nl :-
   dget_output_stream(GraleOStream),
   nl(GraleOStream).
 
 grale_flush_output :-
+  redirect_grale_output_to_tralesld(_,_),
+  !.
+
+grale_flush_output :-
   dget_output_stream(GraleOStream),
   flush_output(GraleOStream).
 
