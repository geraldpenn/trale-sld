--- trale.orig/debugger/interp.pl	2009-02-26 22:10:33.000000000 +0100
+++ trale/debugger/interp.pl	2009-03-27 15:07:03.000000000 +0100
@@ -254,6 +254,15 @@
 % Bug corrected: pretty-printing on dquery/1 was out of date.
 % 1/26/09 - G. Penn
 
+% Added hook get_reply_hook/1 which allows for providing an alternative input
+% method for debugger commands.
+% Added hooks for announcing parsing steps to a client (such as the interface to
+% a graphical debugger): announce_parse_begin_hook/1, announce_step_hook/3, 
+% announce_call_hook/0, announce_fail_hook/0, announce_finished_hook/0,
+% announce_exit_hook/0, announce_redo_hook/1. For usage, see sample_client.pl.
+% Retry at Fail port now handled with ale_retry exception.
+% 3/2/09 - K. Evang
+
 % add graphical variable watcher
 % debug unification and subsumption
 % might want to number clauses of relations and functional desc's for
@@ -403,6 +412,7 @@
   clear,
   reset_d_mode,
   reset_d_skip_level,
+  announce_parse_begin(Ws),
   assert(parsing(Ws)),
   ( current_predicate(lex,lex(_,_))
   -> reverse_count_lex_check(Ws,[],WsRev,0,Length),
@@ -463,6 +473,8 @@
 		      asserta(d_skip_level(OldSkip)),
 		      fail)).
 
+a(b) --> c(d), e(f).
+
 d_query_goal(LabelledGoalDesc,Args,ArgsRest,Goal,Zip) :-
   empty_assoc(NVs),
   d_query_goal0(LabelledGoalDesc,Args,ArgsRest,Goal,NVs,Zip).
@@ -850,11 +862,19 @@
      ).
 
 d_edge_announce_add(N,Left,Right,RuleName) :-
+  (current_predicate(
+       announce_edge_added_hook,announce_edge_added_hook(_,_,_,_)) ->
+     call_all(announce_edge_added_hook(N,Left,Right,RuleName)) ;
+     true),
   format('Edge added: Number: ~w, Left: ~w, Right: ~w, Rule: ~w~n',
          [N,Left,Right,RuleName]),
   ttyflush.
 
 d_edge_announce_retrieve(N,Left,Right,RuleName) :-
+  (current_predicate(
+       announce_edge_retrieved_hook,announce_edge_retrieved_hook(_)) ->
+     call_all(announce_edge_retrieved_hook(N)) ;
+     true),
   ((d_mode(creep)
    ;d_mode(line(_))) ->
     format('Edge retrieved: Number: ~w, Left: ~w, Right: ~w, Rule: ~w~n',
@@ -1865,14 +1885,18 @@
 
 % meta-interpret Goal within a box labelled Port, corresponding to
 % source-line Line
-d_meta_interp(PortCommand,Line,Goal) :-	       
+d_meta_interp(PortCommand,Line,Goal) :-
+  d_meta_interp(PortCommand,Line,Goal,false).
+
+d_meta_interp(PortCommand,Line,Goal,Retrying) :-
+  (Retrying -> true ; announce_step(PortCommand,Line,Goal,StepID)),
   on_exception(ale_retry,
     (d_call_fail(PortCommand,Line),
     on_exception(ale_fail,
       (call_det(Goal,DetFlag),
-       d_exit_redo(PortCommand,Line,DetFlag)),
+       d_exit_redo(StepID,PortCommand,Line,DetFlag)),
     fail)),
-  d_meta_interp(PortCommand,Line,Goal)),
+  d_meta_interp(PortCommand,Line,Goal,true)),
   (DetFlag==true -> ! ; true).
 
 :- meta_predicate call_det(:,?).
@@ -1886,6 +1910,61 @@
         ;   Det = false
         ).
 
+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+% Announcement of parsing steps
+
+:- dynamic last_step_id/1.
+:- multifile clear_hook/0.
+
+clear_hook :-
+  retractall(last_step_id(_)),
+  asserta(last_step_id(0)).
+
+announce_parse_begin(Words) :-
+  current_predicate(announce_parse_begin_hook,announce_parse_begin_hook(_)) ->
+    call_all(announce_parse_begin_hook(Words)) ;
+    true.
+
+announce_step(Command,Line,Goal,StepID) :-
+  parsing(_) -> (
+    retract(last_step_id(OldStepID)),
+    StepID is OldStepID + 1,
+    asserta(last_step_id(StepID)),
+    current_predicate(announce_step_hook,announce_step_hook(_,_,_,_)) ->
+      call_all(announce_step_hook(StepID,Command,Line,Goal)) ;
+      true
+  ) ; true.
+
+announce_call :-
+  parsing(_) -> (
+    current_predicate(announce_call_hook,announce_call_hook) ->
+      call_all(announce_call_hook) ; true
+  ) ; true.
+
+announce_fail :-
+  parsing(_) -> (
+    current_predicate(announce_fail_hook,announce_fail_hook) ->
+      call_all(announce_fail_hook) ; true
+  ) ; true.
+
+announce_finished :-
+  parsing(_) -> (
+    current_predicate(announce_finished_hook,announce_finished_hook) ->
+      call_all(announce_finished_hook) ; true
+  ) ; true.
+
+announce_exit :-
+  parsing(_) -> (
+    current_predicate(announce_exit_hook,announce_exit_hook) ->
+      call_all(announce_exit_hook) ; true
+  ) ; true.
+
+announce_redo(StepID) :-
+  parsing(_) -> (
+    current_predicate(announce_redo_hook,announce_redo_hook(_)) ->
+      call_all(announce_redo_hook(StepID)) ; true
+  ) ; true.
+
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 % Call and Fail ports
 d_call_fail(Command,Line) :-
@@ -1899,6 +1978,7 @@
 %    ((CFunc == featval,Skip==10046) -> trace ; true),
   
     d_mode(Mode),
+    announce_call,
     display_and_ask_call(Mode,Command,Line,Skip),
     NewSkip is Skip + 1,
     set_d_skip_level(NewSkip).
@@ -1913,7 +1993,8 @@
 %    write(user_error,CFunc), write(user_error,' '),
 %    write(user_error,OldSkip),
 %    nl(user_error), flush_output(user_error),
-  
+
+    (failure_driven(Command) -> announce_finished ; announce_fail),
     display_and_ask_fail(Mode,OldSkip,Command,Line).
 
 % integrity. % :- d_skip_level(_),!.
@@ -1935,7 +2016,7 @@
 %              retract(intlevel(S)),
 %              write(user_error,S),write(user_error,' '),
 %              fail
-%	    ; nl(user_error), flush_output(user_error), abort
+%	    ; nl(user_error), flush_output(user_error), f
 %	    )
 %  ; true
 %  ).
@@ -1951,7 +2032,7 @@
       retract(d_mode(_)),
       assert(d_mode(skip(Skip)))
     ; (ale_leash(Command) ->
-        ttyget0(Reply),
+        get_reply(Reply),
         dac_act(Reply,Skip,Command,Line)
       ; nl,ttyflush,
         true))
@@ -1966,7 +2047,7 @@
       retract(d_mode(_)),
       assert(d_mode(skip(Skip)))
     ; (ale_leash(Command) ->
-        ttyget0(Reply),
+        get_reply(Reply),
         dac_act(Reply,Skip,Command,Line)
       ; nl,ttyflush,
         true))).
@@ -1977,45 +2058,44 @@
     retract(d_mode(_)),
     assert(d_mode(skip(Skip)))
   ; (ale_leash(Command) ->
-      ttyget0(Reply),
+      get_reply(Reply),
       dac_act(Reply,Skip,Command,Line)
     ; nl,ttyflush,
       true)).
 
 dac_act(97,_,_,_) :-       % (a)bort
-  skip_line,
   abort.
 dac_act(102,_,_,_) :-      % (f)ail
-  !,skip_line,
+  !,
   fail.
 dac_act(108,_,_,_) :- % (l)eap
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(leap)).
 dac_act(99,_,_,_) :-  % (c)reep
-  !,skip_line.
+  !.
 dac_act(115,Skip,_,_) :-   % (s)kip
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(skip(Skip))).
 dac_act(110,_,_,Line) :-   % li(n)e
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(line(Line))). 
 dac_act(100,Skip,Command,Line) :-  % (d)isplay current FS
-  !,skip_line,
+  !,
   display_current(Command),
   display_and_ask_call(creep,Command,Line,Skip).
 dac_act(43,Skip,Command,Line) :-        % +: set spypoint
-  !,skip_line,
+  !,
   set_ale_break(Line),
   display_and_ask_call(creep,Command,Line,Skip).
 dac_act(45,Skip,Command,Line) :-        % -: remove spypoint
-  !,skip_line,
+  !,
   reset_ale_break(Line),
   display_and_ask_call(creep,Command,Line,Skip).
 dac_act(105,Skip,Command,Line) :-      % toggle chart (i)nterpreter
-  !,skip_line,
+  !,
   (no_interpreter ->
     interp
   ; nointerp),
@@ -2028,12 +2108,12 @@
      (write(no),nl)),  % don't let Goal failure cause failure in trace
   nl,nl,ttyflush,
   write('Call:'),write_command(Command),write('? '),ttyflush,
-  ttyget0(Reply),
+  get_reply(Reply),
   dac_act(Reply,Skip,Command,Line).
 dac_act(10,_,_,_) :-  % LFD (same as creep)
   !.
 dac_act(104,Skip,Command,Line) :-       % (h)elp
-  !,skip_line,
+  !,
   nl,write('Call port commands:'),nl,
   write('(a)bort     (l)eap'),nl,
   write('(LF/c)reep  li(n)e'),nl,
@@ -2049,7 +2129,6 @@
 dac_act(63,Skip,Command,Line) :-        % ?: help also
   !,dac_act(104,Skip,Command,Line).
 dac_act(_,Skip,Command,Line) :-     % everything else - try again
-  skip_line,
   write(user_error,'Invalid Response (? or h for help)'),nl(user_error),
   flush_output(user_error),
   display_and_ask_call(creep,Command,Line,Skip).
@@ -2062,7 +2141,7 @@
     write('<auto-skipped>'),nl,ttyflush,
     fail
   ; (ale_leash(Command) ->
-      ttyget0(Reply),
+      get_reply(Reply),
       daf_act(Reply,Skip,Command,Line)
     ; nl,ttyflush,
       fail)).
@@ -2074,7 +2153,7 @@
     assert(d_mode(creep)),
     d_ask(fail,Command,Line),
     (ale_leash(Command) ->
-      ttyget0(Reply),
+      get_reply(Reply),
       daf_act(Reply,Skip,Command,Line)
     ; nl,ttyflush,
       fail)
@@ -2086,53 +2165,52 @@
     assert(d_mode(creep)),
     d_ask(fail,Command,Line),
     (ale_leash(Command) ->
-      ttyget0(Reply),
+      get_reply(Reply),
       daf_act(Reply,Skip,Command,Line)
     ; nl,ttyflush,
       fail)).
 display_and_ask_fail(creep,Skip,Command,Line) :-
   d_ask(fail,Command,Line),
   (ale_leash(Command) ->
-    ttyget0(Reply),
+    get_reply(Reply),
     daf_act(Reply,Skip,Command,Line)
   ; nl,ttyflush,
     fail).
 
 daf_act(97,_,_,_) :-       % (a)bort
-  skip_line,
   abort.
 daf_act(108,_,_,_) :- % (l)eap
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(leap)),
   fail.
 daf_act(99,_,_,_) :-  % (c)reep
-  !,skip_line,
+  !,
   fail.
-daf_act(114,_Skip,Command,Line) :- % (r)etry
-  !,skip_line,
-  d_call_fail(Command,Line).
+daf_act(114,_,_,_) :- % (r)etry
+  !,
+  raise_exception(ale_retry).
 daf_act(10,_,_,_) :-                    % LFD (same as creep)
   !,fail.
 daf_act(110,_,_,Line) :-                % li(n)e
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(line(Line))),
   fail.
 daf_act(100,Skip,Command,Line) :-  % (d)isplay current FS
-  !,skip_line,
+  !,
   display_current(Command),
   display_and_ask_fail(creep,Skip,Command,Line).
 daf_act(43,Skip,Command,Line) :-    % +: set spypoint
-  !,skip_line,
+  !,
   set_ale_break(Line),
   display_and_ask_fail(creep,Skip,Command,Line).
 daf_act(45,Skip,Command,Line) :-    % -: remove spypoint
-  !,skip_line,
+  !,
   reset_ale_break(Line),
   display_and_ask_fail(creep,Skip,Command,Line).
 daf_act(105,Skip,Command,Line) :-      % toggle chart (i)nterpreter
-  !,skip_line,
+  !,
   (no_interpreter ->
     interp
   ; nointerp),
@@ -2145,10 +2223,10 @@
      (write(no),nl)),  % don't let Goal failure cause failure in trace
   nl,nl,ttyflush,
   write('Fail:'),write_command(Command),write('? '),ttyflush,
-  ttyget0(Reply),
+  get_reply(Reply),
   daf_act(Reply,Skip,Command,Line).
 daf_act(104,Skip,Command,Line) :-       % (h)elp
-  !,skip_line,
+  !,
   nl,write('Fail port commands:'),nl,
   write('(a)bort     (l)eap'),nl,
   write('(LF/c)reep  li(n)e'),nl,
@@ -2164,14 +2242,13 @@
 daf_act(63,Skip,Command,Line) :-        % ?: help also
   !,daf_act(104,Skip,Command,Line).
 daf_act(_,Skip,Command,Line) :-     % everything else - try again
-  skip_line,
   write(user_error,'Invalid Response (? or h for help)'),nl(user_error),
   flush_output(user_error),
   display_and_ask_fail(creep,Skip,Command,Line).
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 % Exit and Redo ports
-d_exit_redo(Command,Line,DetFlag) :-
+d_exit_redo(_,Command,Line,DetFlag) :-
   d_mode(Mode),
   (d_skip_level(Skip) -> % need shallow cut for buggy Win32 SICStus
      OldSkip is Skip - 1,
@@ -2182,10 +2259,11 @@
 %     write(user_error,OldSkip),
 %     nl(user_error), flush_output(user_error),
 
+     announce_exit,
      display_and_ask_exit(Mode,OldSkip,Command,Line,DetFlag),
      set_d_skip_level(OldSkip)
   ).
-d_exit_redo(Command,Line,_) :-
+d_exit_redo(StepID,Command,Line,_) :-
   d_mode(Mode),
   (retract(d_skip_level(Skip)) -> % need shallow cut for buggy Win32 SICStus
 
@@ -2197,6 +2275,7 @@
     
    NewSkip is Skip + 1,
    asserta(d_skip_level(NewSkip)), % need asserta/1 for buggy Win32 SICStus
+   announce_redo(StepID),
    display_and_ask_redo(Mode,Command,Line,Skip)
   ).
 
@@ -2207,7 +2286,7 @@
   (ale_dskip(Command) ->
     write('<auto-skipped>'),nl,ttyflush
   ; (ale_leash(Command) ->
-      ttyget0(Reply),
+      get_reply(Reply),
       dae_act(Reply,Skip,Command,Line,DetFlag)
     ; nl,ttyflush,
       true)).
@@ -2218,7 +2297,7 @@
     assert(d_mode(creep)),
     d_ask(exit(DetFlag),Command,Line),
     (ale_leash(Command) ->
-      ttyget0(Reply),
+      get_reply(Reply),
       dae_act(Reply,Skip,Command,Line,DetFlag)
     ; nl,ttyflush,
       true)
@@ -2229,53 +2308,52 @@
     assert(d_mode(creep)),
     d_ask(exit(DetFlag),Command,Line),
     (ale_leash(Command) ->
-      ttyget0(Reply),
+      get_reply(Reply),
       dae_act(Reply,Skip,Command,Line,DetFlag)
     ; nl,ttyflush,
       true)).
 display_and_ask_exit(creep,Skip,Command,Line,DetFlag) :-
   d_ask(exit(DetFlag),Command,Line),
   (ale_leash(Command) ->
-    ttyget0(Reply),
+    get_reply(Reply),
     dae_act(Reply,Skip,Command,Line,DetFlag)
   ; nl,ttyflush,
     true).
 
 dae_act(97,_,_,_,_) :-       % (a)bort
-  skip_line,
   abort.
 dae_act(102,_,_,_,_) :-      % (f)ail
-  !,skip_line,
+  !,
   raise_exception(ale_fail).
 dae_act(108,_,_,_,_) :-   % (l)eap
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(leap)).
 dae_act(99,_,_,_,_) :-       % (c)reep
-  !,skip_line.
+  !.
 dae_act(114,_,_,_,_) :- % (r)etry
-  !,skip_line,
+  !,
   raise_exception(ale_retry).
 dae_act(10,_,_,_,_) :-       % LFD (same as creep)
   !.
 dae_act(110,_,_,Line,_) :-   % li(n)e
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(line(Line))).
 dae_act(100,Skip,Command,Line,DetFlag) :-   % (d)isplay current FS
-  !,skip_line,
+  !,
   display_current(Command),
   display_and_ask_exit(creep,Skip,Command,Line,DetFlag).
 dae_act(43,Skip,Command,Line,DetFlag) :-    % +: set spypoint
-  !,skip_line,
+  !,
   set_ale_break(Line),
   display_and_ask_exit(creep,Skip,Command,Line,DetFlag).
 dae_act(45,Skip,Command,Line,DetFlag) :-    % -: remove spypoint
-  !,skip_line,
+  !,
   reset_ale_break(Line),
   display_and_ask_exit(creep,Skip,Command,Line,DetFlag).
 dae_act(105,Skip,Command,Line,DetFlag) :-      % toggle chart (i)nterpreter
-  !,skip_line,
+  !,
   (no_interpreter ->
     interp
   ; nointerp),
@@ -2288,10 +2366,10 @@
      (write(no),nl)),  % don't let Goal failure cause failure in trace
   nl,nl,ttyflush,
   write('Exit:'),write_command(Command),write('? '),ttyflush,
-  ttyget0(Reply),
+  get_reply(Reply),
   dae_act(Reply,Skip,Command,Line,DetFlag).
 dae_act(104,Skip,Command,Line,DetFlag) :-       % (h)elp
-  !,skip_line,
+  !,
   nl,write('Exit port commands:'),nl,
   write('(a)bort     (l)eap'),nl,
   write('(LF/c)reep  li(n)e'),nl,
@@ -2307,7 +2385,6 @@
 dae_act(63,Skip,Command,Line,DetFlag) :-        % ?: help also
   !,dae_act(104,Skip,Command,Line,DetFlag).
 dae_act(_,Skip,Command,Line,DetFlag) :-   % everything else - try again
-  skip_line,
   write(user_error,'Invalid Response (? or h for help)'),nl(user_error),
   flush_output(user_error),
   display_and_ask_exit(creep,Skip,Command,Line,DetFlag).
@@ -2325,7 +2402,7 @@
       assert(d_mode(skip(Skip))),
       fail
     ; (ale_leash(Command) ->
-        ttyget0(Reply),
+        get_reply(Reply),
         dar_act(Reply,Skip,Command,Line)
       ; nl,ttyflush,
         fail))
@@ -2342,7 +2419,7 @@
       assert(d_mode(skip(Skip))),
       fail
     ; (ale_leash(Command) ->
-        ttyget0(Reply),
+        get_reply(Reply),
         dar_act(Reply,Skip,Command,Line)
       ; nl,ttyflush,
         fail))).
@@ -2354,54 +2431,53 @@
     assert(d_mode(skip(Skip))),
     fail
   ; (ale_leash(Command) ->
-      ttyget0(Reply),
+      get_reply(Reply),
       dar_act(Reply,Skip,Command,Line)
     ; nl,ttyflush,
       fail)).
 
 dar_act(97,_,_,_) :-    % (a)bort
-  skip_line,
   abort.
 dar_act(102,_,_,_) :-   % (f)ail
-  !,skip_line,
+  !,
   raise_exception(ale_fail).
 dar_act(108,_,_,_) :-   % (l)eap
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(leap)),
   fail.
 dar_act(99,_,_,_) :-       % (c)reep
-  !,skip_line,
+  !,
   fail.
 dar_act(114,_,_,_) :- % (r)etry
-  !,skip_line,
+  !,
   raise_exception(ale_retry).
 dar_act(115,Skip,_,_) :-   % (s)kip
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(skip(Skip))),
   fail.
 dar_act(10,_,_,_) :-       % LFD (same as creep)
   !,fail.
 dar_act(110,_,_,Line) :-   % li(n)e
-  !,skip_line,
+  !,
   retract(d_mode(_)),
   assert(d_mode(line(Line))),
   fail.
 dar_act(100,Skip,Command,Line) :-   % (d)isplay current FS
-  !,skip_line,
+  !,
   display_current(Command),
   display_and_ask_redo(creep,Command,Line,Skip).
 dar_act(43,Skip,Command,Line) :-    % +: set spypoint
-  !,skip_line,
+  !,
   set_ale_break(Line),
   display_and_ask_redo(creep,Command,Line,Skip).
 dar_act(45,Skip,Command,Line) :-    % -: remove spypoint
-  !,skip_line,
+  !,
   reset_ale_break(Line),
   display_and_ask_redo(creep,Command,Line,Skip).
 dar_act(105,Skip,Command,Line) :-      % toggle chart (i)nterpreter
-  !,skip_line,
+  !,
   (no_interpreter ->
     interp
   ; nointerp),
@@ -2414,10 +2490,10 @@
      (write(no),nl)),  % don't let Goal failure cause failure in trace
   nl,nl,ttyflush,
   write('Redo:'),write_command(Command),write('? '),ttyflush,
-  ttyget0(Reply),
+  get_reply(Reply),
   dar_act(Reply,Skip,Command,Line).
 dar_act(104,Skip,Command,Line) :-       % (h)elp
-  !,skip_line,
+  !,
   nl,write('Redo port commands:'),nl,
   write('(a)bort     (l)eap'),nl,
   write('(LF/c)reep  li(n)e'),nl,
@@ -2434,10 +2510,23 @@
 dar_act(63,Skip,Command,Line) :-        % ?: help also
   !,dar_act(104,Skip,Command,Line).
 dar_act(_,Skip,Command,Line) :-    % everything else - try again
-  skip_line,
   write(user_error,'Invalid Response (? or h for help)'),nl(user_error),
   flush_output(user_error),
   display_and_ask_redo(creep,Command,Line,Skip).
+  
+% get_reply(-Reply)
+%   Called when waiting at a step to get the reply of the user or the steering
+%   application. If the hook get_reply_hook/1 is defined, it will be used. If
+%   not, the default strategy (read one character from the terminal) will be
+%   used.
+get_reply(Reply) :-
+  current_predicate(get_reply_hook, get_reply_hook(_)),
+  get_reply_hook(Reply),
+  !.
+
+get_reply(Reply) :-
+  get_code(Reply),
+  (Reply =:= 10 -> true ; skip_line).
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 % Un/block ports
