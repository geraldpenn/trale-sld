#summary Project description in note form

= Visualization =

  * of the grammar:
    * ✓ display theory file and highlight line corresponding to current step
    * ⌛ sort hierarchy with attribute appropriateness
  * of the parsing process:
    * ✓ interactive decision tree
      * ✓ basic structure based on control flow (branches during backtracking)
      * ✓ secondary tree based on call stacks
      * ⌛ visualize jumps after exits and failures
      * ✓ chart edges linked to nodes in decision tree
    * ✓ overview tree (allows inspection of chart construction process)
    * ✓ chart display
      * ⌛ interactively show dependencies between "daughter" and "mother" chart edges
    * ⌛ always show parse tree fragment of current rule application
      * ✓ inspect feature structures (GraleJ)
      * ⌛ highlight substructures affected by current step
    * ⌛ extend decision tree to logic programs
      * ⌛ display variable bindings at each step

= Control =

  * ✓ steer the tracer via GUI buttons
    * ⌛ keyboard shortcuts

= Advanced Features =

_(will probably require extending TRALE itself a lot, to be investigated)_

  * direct links from generated (sub)structures to the principles/ID schemata/signature entries/... that licensed those structures
  * ability to Retry a specific step (other than the one that has just completed)

= Architecture =

  * parallelism (no GUI freeze while TRALE is working)
  * communication between Prolog and Java: Socket, client-server architecture? Jasper?
  * modular, facility to add visualization components